{"version":3,"sources":["atom.tsx","Components/CreateToDo.tsx","Components/ToDo.tsx","Components/CreateCategory.tsx","Components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","customCategoryState","atom","key","default","categoryState","TO_DO","toDoState","JSON","parse","localStorage","getItem","toDoSelector","selector","get","toDos","category","filter","toDo","Form","styled","form","props","theme","bgColor","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","errors","formState","setValue","onSubmit","prevToDos","text","id","Date","now","message","required","placeholder","Li","li","ToDo","onClick","event","name","currentTarget","oldToDos","toDoIndex","findIndex","oldTodo","newToDos","newTodo","splice","window","confirm","className","DOING","DONE","Button","button","CreateCategory","setCustomCategory","customCategory","prevCategories","title","Wrapper","div","Title","CategoryDiv","CategoryTitle","h1","Footer","footer","ToDoList","allToDos","customCategories","useRecoilState","setCategory","useEffect","setItem","stringify","value","onInput","map","GlobalStyle","createGlobalStyle","textColor","App","queryClient","QueryClient","ReactDOM","render","StrictMode","accentColor","client","document","getElementById"],"mappings":"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","file":"static/js/main.3ca78d0c.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\n\nexport enum Categories {\n    \"TO_DO\" = \"할 일\",\n    \"DOING\" = \"진행 중\",\n    \"DONE\" = \"끝낸 일\"\n}\n\nexport interface ITodo {\n    text : string;\n    id: number;\n    category: Categories;\n}\n\nexport interface ICustomCategory {\n    title: string;\n    id : number;\n}\n\nexport const customCategoryState = atom<ICustomCategory[]>({\n    key:\"customCategory\",\n    default: []\n})\n\nexport const categoryState = atom<Categories>({\n    key:\"category\",\n    default: Categories.TO_DO\n})\n\n\nexport const toDoState = atom<ITodo[]>({\n    key:\"toDo\",\n    default: JSON.parse(localStorage.getItem(\"TODOS\") || \"[]\" )\n})\n\nexport const toDoSelector = selector({\n    key:\"toDoSelector\",\n    get : ({get}) => {\n        const toDos = get(toDoState)\n        const category = get(categoryState)\n        return toDos.filter(toDo => toDo.category === category );\n    }\n})\n\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, toDoState } from \"../atom\";\nimport styled from \"styled-components\";\n\nconst Form = styled.form`\n    margin-bottom: 40px;\n    display:flex;\n    align-items:center;\n    background-color:#FFC312;\n    padding:10px;\n    border-radius:10px;\n    input {\n        height : 40px;\n        width: 250px;\n        margin-right: 5px;\n        border-radius: 5px;\n        border: none;\n        padding: 0 10px;\n        font-size: 20px;\n        font-family: 'Gaegu', cursive;\n    }\n    button {\n        cursor: pointer;\n        background:none;\n        height:40px;\n        font-family: 'Gaegu', cursive;\n        border-radius: 10px;\n        border:1px solid black;\n        background-color: ${props => props.theme.bgColor};\n        \n    }\n`\n\ninterface IForm {\n    toDo: string;\n}\n\nfunction CreateToDo() {\n    const setToDos = useSetRecoilState(toDoState)\n    const category = useRecoilValue(categoryState)\n    const { register, handleSubmit, \n        formState: { errors }, setValue\n    } = useForm<IForm>({\n    });\n    const onValid = ( { toDo }: IForm) => {\n        setToDos(prevToDos => [{ text:toDo, id:Date.now(), category }, ...prevToDos])\n        setValue(\"toDo\", \"\");\n        \n    }\n    return (\n        <Form onSubmit={handleSubmit(onValid)}>\n                <span>\n                    {errors?.toDo?.message}\n                </span>\n                <input {...register(\"toDo\", { \n                    required : \"To do is required\",\n                    })} \n                    placeholder=\"새로운 할 일을 적어주세요\" />\n                <button>추가</button>\n            </Form>\n    )\n}\n\nexport default CreateToDo;","import { Categories, ITodo, toDoState } from \"atom\";\nimport React from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\n\nconst Li = styled.li`\n    width: 300px;\n    border : 1px solid black;\n    padding: 10px;\n    border-radius: 5px;\n    margin-bottom: 15px;\n    background-color: #FFC312;\n    h1 {\n        margin-bottom: 10px;\n        font-size: 20px;\n        color:white;\n    }\n    div {\n        width:100%;\n        display: flex;\n        justify-content: flex-end;\n    }\n    button {\n        cursor: pointer;\n        background:none;\n        font-family: 'Gaegu', cursive;\n        margin-right:5px;\n        padding: 4px 7px;\n        display:flex;\n        justify-content:center;\n        align-items:center;\n        font-size:11px;\n        border: 1px solid black;\n        background-color: ${props => props.theme.bgColor};\n        .fa-trash-alt {\n            color:#EE5A24;\n        }\n        .fa-check-square {\n            color:#10ac84;\n        }\n        .fa-spinner {\n            color:#f368e0;\n        }\n    }\n`;\n\nfunction ToDo({ text, category, id }:ITodo) {\n    const setToDos = useSetRecoilState(toDoState);\n    const onClick = (event:React.MouseEvent<HTMLButtonElement>) => {\n        const { currentTarget : { name } } = event\n        setToDos(oldToDos => {\n            const toDoIndex = oldToDos.findIndex(toDo=> toDo.id === id);\n            const oldTodo = oldToDos[toDoIndex];\n            const newToDos = [...oldToDos];\n            if ( name !== \"delete\" ) {\n                const newTodo = { ...oldTodo, category : name as ITodo[\"category\"] }\n                newToDos.splice(toDoIndex, 1, newTodo); \n            }\n            else {\n                if (window.confirm(\"정말로 이 항목을 삭제해도 괜찮아요?\")) {\n                    newToDos.splice(toDoIndex, 1);\n                }\n            }\n            return newToDos\n        })\n    };\n    return (\n        <Li>\n        <h1>{text}</h1>\n        <div>\n        {category !== Categories.TO_DO && \n        <button name={Categories.TO_DO} onClick={onClick}>할 일&nbsp;<i className=\"fas fa-list\"></i></button>}\n        {category !== Categories.DOING && \n        <button name={Categories.DOING} onClick={onClick}>진행 중&nbsp;<i className=\"fas fa-spinner\"></i></button>}\n        {category !== Categories.DONE && \n        <button name={Categories.DONE} onClick={onClick}>끝낸 일&nbsp;<i className=\"fas fa-check-square\"></i></button>}\n        <button name=\"delete\" onClick={onClick}>삭제하기<i className=\"fas fa-trash-alt\"></i></button>\n        </div>\n        </Li>\n    )\n}\n\nexport default ToDo;\n\n// && ? ","import { customCategoryState, ICustomCategory } from \"atom\";\nimport { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport styled from  \"styled-components\";\n\n\nconst Form = styled.form`\n    display:flex;\n    input {\n        height: 30px;\n        width:110px;\n        border: none;\n        border-radius: 5px;\n        font-family: 'Gaegu', cursive;\n        padding: 0 10px;\n    }\n`;\n\n\nconst Button = styled.button`\n    cursor: pointer;\n    background-color: ${props => props.theme.bgColor};\n    border: none;\n    i {\n        font-size: 25px;\n        color: #009432;\n    }\n\n`;\n\n\ninterface IForm {\n    customCategory: string;\n}\n\n\n\nfunction CreateCategory() {\n    const setCustomCategory = useSetRecoilState(customCategoryState)\n    const { register, handleSubmit, setValue } = useForm();\n    const onValid = ({ customCategory }:IForm) => {\n        setCustomCategory(prevCategories => [ {title:customCategory, id:Date.now()}, ...prevCategories])\n        setValue(\"customCategory\", \"\")\n    }\n    return(\n        <Form onSubmit={handleSubmit(onValid)}>\n            <input {...register(\"customCategory\")} placeholder=\"새 카테고리 추가\" />\n            <Button><i className=\"fas fa-plus-square\"></i></Button>\n        </Form>\n    )\n}\n\nexport default CreateCategory","import { Categories, categoryState, customCategoryState, toDoSelector, toDoState } from \"atom\";\nimport React, { useEffect, useState } from \"react\";\nimport CreateToDo from \"./CreateToDo\";\nimport { selector, useRecoilState, useRecoilValue } from \"recoil\";\nimport ToDo from \"./ToDo\";\nimport CreateCategory from \"./CreateCategory\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n    display:flex;\n    flex-direction:column;\n    align-items: center; \n    height:100%;\n    min-height:96vh;\n`;\n\nconst Title = styled.div`\n    font-size : 30px;\n    margin-top: 30px;\n    margin-bottom :30px;\n    font-weight:500;\n    \n`;\n\nconst CategoryDiv = styled.div`\n    display:flex;\n    justify-content:space-between;\n    align-self: center;\n    margin-bottom : 30px;\n    \n    div {\n        font-size:20px;\n        height:30px;\n        display:flex;\n        align-items:center;\n    }\n    select {\n        height: 30px;\n        width: 70px;\n        font-family: 'Gaegu', cursive;\n        border:none;\n        border-radius:5px;\n        margin-right: 10px;\n        option {\n         text-align:center;\n        }\n       \n\n    }\n`;\n\nconst CategoryTitle = styled.h1`\n    margin-bottom: 30px;\n    font-size:20px;\n\n`;\n\nconst Footer = styled.footer`\n    text-align : center;\n`;\n\nfunction ToDoList() {\n    const allToDos = useRecoilValue(toDoState)\n    const toDos = useRecoilValue(toDoSelector);\n    const customCategories = useRecoilValue(customCategoryState)\n    const [ category, setCategory ] = useRecoilState(categoryState);\n    const onInput = (event:React.FormEvent<HTMLSelectElement>) => {\n        const { currentTarget : { value }} = event;\n        setCategory(value as any);\n    }\n    useEffect(() => {\n        localStorage.setItem(\"TODOS\", JSON.stringify(allToDos))\n    }, [allToDos])\n    return (\n        <>\n        <Wrapper>\n            <Title>오늘의 할 일🍊</Title>\n            <CategoryDiv>\n                <div>분류:&nbsp;</div>\n                <select value={category} onInput={onInput}>\n                    <option value={Categories.TO_DO}>할 일</option>\n                    <option value={Categories.DOING}>진행 중</option>\n                    <option value={Categories.DONE}>끝낸 일</option>\n                    {customCategories.map(category => (\n                        <option key={category.id} value={category.title}>{category.title}</option>\n                    ))}\n                </select>\n                <CreateCategory />\n            </CategoryDiv>\n            <CreateToDo />\n            <CategoryTitle>{category}</CategoryTitle>\n            <ul>\n                {toDos.map(toDo => (\n                    <ToDo key={toDo.id} {...toDo}/>\n                    ))}\n            </ul>\n    </Wrapper>\n    <Footer>\n    &copy; 2021 To Do Arancia All rights reserved.\n    </Footer>\n    </> \n    )  \n}\n\nexport default ToDoList\n\n\n// witout react-hook-form\n/* \nfunction ToDoList() {\n    const [ toDo, setToDo ] = useState(\"\");\n    const [ todoError, setToDoError ] = useState(\"\");\n    const onChange = (event:React.FormEvent<HTMLInputElement>) => {\n        const {currentTarget : { value } } = event;\n        setToDo(value);\n        setToDoError(\"\");   \n    }\n    const onSubmit = (event:React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        if(toDo.length < 10){\n            setToDoError(\"To do should be longer\")\n        }\n        console.log(\"submit\");\n    }\n    return <div>\n        <form onSubmit={onSubmit}>\n            <input onChange={onChange} value={toDo} placeholder=\"Write to do\" />\n            <button>Add</button>\n            {todoError !== \"\" ? todoError : null }\n        </form>\n    </div>\n} */\n\n\n// with react-hook-form!\n/* \ninterface IForm {\n    toDo: string;\n    password: string;\n    password2: string;\n    extraError?: string;\n}\n\nfunction ToDoList() {\n    const { register, handleSubmit, \n        formState: { errors }, setError \n    } = useForm<IForm>({\n        defaultValues: {\n            toDo: \"Happy Coding\"\n        }\n    });\n    const onValid = (data: IForm) => {\n        if (data.password !== data.password2) {\n            setError(\"password\", { message : \"Passwords does not match\"}, {shouldFocus:true})\n        }\n        //setError(\"extraError\", { message : \"server offline\"})\n    }\n    console.log(errors)\n    return <div style={{display:\"flex\", justifyContent:\"center\",}}>\n        <form onSubmit={handleSubmit(onValid)}>\n            <span>\n                {errors?.toDo?.message}\n            </span>\n            <input {...register(\"toDo\", { \n                required : \"To do is required\",\n                validate : (value)=> value.includes(\"pain\") ? \"no pain allowed\" : true,\n                pattern : {\n                    value:/^[A-Za-z0-9._%+-]+@naver.com$/,\n                    message: \"only naver.com email allowed\"\n                },\n                minLength: {\n                value:5, \n                message:\"value is too short!\"\n                } \n                })} \n                placeholder=\"Write to do\" />\n            <span>\n                {errors?.password?.message}\n            </span>\n            <input {...register(\"password\", { \n                required : \"password is required\",\n                minLength : 5 \n            },    \n            )} placeholder=\"passowrd\" />\n            <input {...register(\"password2\", { \n                required : \"password2 is required\",\n                minLength : 5 \n            },    \n            )} placeholder=\"passowrd2\" />\n            <button>Add</button>\n        </form>\n    </div>\n} */","import { createGlobalStyle } from \"styled-components\";\nimport styled from \"styled-components\";\nimport ToDoList from \"Components/ToDoList\";\n\n\n\nconst GlobalStyle = createGlobalStyle`\n/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n*{\n  box-sizing: border-box;\n \n}\n\n\nbody {\n  background-color: ${props => props.theme.bgColor};\n  color: ${props => props.theme.textColor};\n  font-family: 'Gaegu', cursive; \n}\n\na {\n  text-decoration: none;\n  color: inherit;\n}\n\n`;\n\n\n\nfunction App() {\n  \n  return ( \n    <>\n        <GlobalStyle />\n        <ToDoList />\n    </>\n  )\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { RecoilRoot } from \"recoil\";\nimport App from \"./App\";\nimport { ThemeProvider } from \"styled-components\";\nimport { darkTheme } from \"theme\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n    <ThemeProvider theme={ darkTheme }>\n    <QueryClientProvider client={queryClient}>\n        <App />\n    </QueryClientProvider>\n    </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#f6e58d\",\n  textColor: \"#f0932b\",\n  accentColor: \"#eb4d4b\",\n};"],"sourceRoot":""}